(undo-tree-save-format-version . 1)
"006ce20c5cf9f2fa8518a39790ec685725a798b6"
[nil nil nil nil (26374 42165 630315 760000) 0 nil]
([nil nil ((apply yas--snippet-revive 1 47 #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 1 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 1 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (1 . 47)) nil (26374 42165 630314 500000) 0 nil])
([nil nil ((40 . 43) (33 . 40) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -33) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -34) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -35) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 37 (33 . 37) (#("D" 0 1 (fontified t face font-lock-comment-face)) . -33) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 34 (32 . 34)) nil (26374 42165 630312 101000) 0 nil])
([nil nil ((52 . 54)) nil (26374 42165 630301 812000) 0 nil])
([nil current ((77 . 78) (#("4" 0 1 (fontified t face font-lock-string-face)) . -77) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("4" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -79) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 80 (74 . 80) (69 . 74) (#("a" 0 1 (fontified t)) . -69) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 70 (65 . 70) (#("a" 0 1 (fontified t)) . -65) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("c" 0 1 (fontified t)) . -66) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 67 (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -67) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 68 (61 . 68) (60 . 61) 60) nil (26374 42165 630295 474000) 0 nil])
nil
