(undo-tree-save-format-version . 1)
"431e1c26760a75370c8162cc20c380268adfc413"
[nil nil nil nil (26374 57630 347648 868000) 0 nil]
([nil nil ((4125 . 5310) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-document-title ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.5 :underline nil))))
 '(org-level-1 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.25))))
 '(org-level-2 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.0))))
 '(org-level-3 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 1.75))))
 '(org-level-4 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 1.5))))
 '(org-level-5 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-6 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-7 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-8 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\")))))" 0 1185 (fontified nil)) . -4125) (3947 . 4124) (#("
" 0 1 (fontified nil)) . -3947) (3692 . 3948) (#(" " 0 1 (fontified nil)) . 3692) (3621 . 3693) (#("
" 0 1 (fontified nil)) . -3621) (3242 . 3622) (#(" " 0 1 (fontified nil)) . 3242) (3139 . 3243) (#("
" 0 1 (fontified nil)) . -3139) (3054 . 3140) (#(" " 0 1 (fontified nil)) . 3054) (3026 . 3055) (#("
" 0 1 (fontified nil)) . -3026) (2958 . 3027) (#(" " 0 1 (fontified nil)) . 2958) (2687 . 2959) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   [\"black\" \"red3\" \"ForestGreen\" \"yellow3\" \"blue\" \"magenta3\" \"DeepSkyBlue\" \"gray50\"])
 '(ispell-dictionary nil)
 '(minimap-mode nil)
 '(minimap-window-location 'right)
 '(org-agenda-files
   '(\"/home/ronan/Documents/exchange/todo.org\" \"/home/ronan/Documents/exchange/CERN_questions.org\" \"/home/ronan/Documents/exchange/all.org\" \"/home/ronan/Documents/exchange/calendar.org\" \"/home/ronan/Documents/exchange/itinerary.org\" \"/home/ronan/Documents/exchange/rooms.org\" \"/home/ronan/Documents/exchange/travel_and_reentry.org\" \"/home/ronan/Documents/exchange/vaccines.org\"))
 '(org-directory \"~/Documents/exchange\")
 '(package-selected-packages
   '(yasnippet flycheck solo-jazz-theme org-bullets pdf-tools undo-tree spell-fu jedi smartparens org-fragtog auctex wc-mode anki-editor c-eval minimap elpy dracula-theme rainbow-delimiters emms sage-shell-mode use-package maxima dashboard evil))
 '(sage-shell:check-ipython-version-on-startup nil)
 '(sage-shell:set-ipython-version-on-startup nil)
 '(sage-shell:use-prompt-toolkit nil)
 '(sage-shell:use-simple-prompt t))" 0 1428 (fontified nil)) . -2687) (t 26374 57621 548212 273000)) nil (26377 19864 565758 658000) 0 nil])
([nil nil ((4131 . 5316) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-document-title ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.5 :underline nil))))
 '(org-level-1 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.25))))
 '(org-level-2 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 2.0))))
 '(org-level-3 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 1.75))))
 '(org-level-4 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\" :height 1.5))))
 '(org-level-5 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-6 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-7 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\"))))
 '(org-level-8 ((t (:inherit default :weight bold :foreground \"gray80\" :family \"Sans Serif\")))))" 0 1185 (fontified nil)) . -4131) (3953 . 4130) (#("
" 0 1 (fontified nil)) . -3953) (3692 . 3954) (#(" " 0 1 (fontified nil)) . 3692) (3621 . 3693) (#("
" 0 1 (fontified nil)) . -3621) (3242 . 3622) (#(" " 0 1 (fontified nil)) . 3242) (3139 . 3243) (#("
" 0 1 (fontified nil)) . -3139) (3054 . 3140) (#(" " 0 1 (fontified nil)) . 3054) (3026 . 3055) (#("
" 0 1 (fontified nil)) . -3026) (2958 . 3027) (#(" " 0 1 (fontified nil)) . 2958) (2687 . 2959) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   [\"black\" \"red3\" \"ForestGreen\" \"yellow3\" \"blue\" \"magenta3\" \"DeepSkyBlue\" \"gray50\"])
 '(ispell-dictionary nil)
 '(minimap-mode nil)
 '(minimap-window-location 'right)
 '(org-agenda-files
   '(\"/home/ronan/Documents/exchange/todo.org\" \"/home/ronan/Documents/exchange/CERN_questions.org\" \"/home/ronan/Documents/exchange/all.org\" \"/home/ronan/Documents/exchange/calendar.org\" \"/home/ronan/Documents/exchange/itinerary.org\" \"/home/ronan/Documents/exchange/rooms.org\" \"/home/ronan/Documents/exchange/travel_and_reentry.org\" \"/home/ronan/Documents/exchange/vaccines.org\"))
 '(org-directory \"~/Documents/exchange\")
 '(package-selected-packages
   '(org-anki yasnippet flycheck solo-jazz-theme org-bullets pdf-tools undo-tree spell-fu jedi smartparens org-fragtog auctex wc-mode anki-editor c-eval minimap elpy dracula-theme rainbow-delimiters emms sage-shell-mode use-package maxima dashboard evil))
 '(sage-shell:check-ipython-version-on-startup nil)
 '(sage-shell:set-ipython-version-on-startup nil)
 '(sage-shell:use-prompt-toolkit nil)
 '(sage-shell:use-simple-prompt t))" 0 1437 (fontified nil)) . -2687) (t 26377 19864 568019 262000)) nil (26383 47094 441452 548000) 0 nil])
([nil nil ((13462 . 13482) (13443 . 13462) (13425 . 13443) (13404 . 13425) (13401 . 13404) (t 26383 47094 443872 315000) 13323) nil (26390 39583 749070 611000) 0 nil])
([nil nil ((13414 . 13415) (#("u" 0 1 (fontified t)) . -13414) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 13415 (t 26390 39583 752054 770000)) nil (26390 39648 377060 475000) 0 nil])
([nil nil ((13458 . 13459) (#("c" 0 1 (face font-lock-string-face fontified t)) . -13458) (undo-tree-id0 . -1) 13459 (t 26390 39648 416057 210000)) nil (26390 39701 6213 378000) 0 nil])
([nil nil ((13458 . 13459) (#("e" 0 1 (face font-lock-string-face fontified t)) . -13458) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 13459 (t 26390 39691 612058 839000)) nil (26390 39730 406516 214000) 0 nil] [nil nil ((11953 . 11954) (t 26390 39691 612058 839000)) ((#("d" 0 1 (face font-lock-comment-face fontified t)) . 11953)) (26390 39701 5925 245000) 0 nil] [nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -11950) (undo-tree-id1 . -1) 11951 (11950 . 11951) (t 26390 39691 612058 839000)) ((#("d" 0 1 (face font-lock-comment-face fontified nil)) . 11950) (11950 . 11951)) (26390 39697 40174 475000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14882 . 14883) (nil fontified nil 14763 . 14883) (14763 . 14883) (t 26390 39730 408060 303000)) nil (26404 65174 695347 37000) 0 nil])
nil
nil
([nil nil ((14785 . 14788) (14764 . 14785) (14763 . 14764) (#("#" 0 1 (fontified t)) . -14763) (undo-tree-id92 . -1) 14764 (14763 . 14764) (14762 . 14763) 14685) nil (26404 65174 695344 818000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -14852) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("-" 0 1 (fontified t)) . -14853) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("s" 0 1 (fontified t)) . -14854) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("e" 0 1 (fontified t)) . -14855) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("t" 0 1 (fontified t)) . -14856) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("-" 0 1 (fontified t)) . -14857) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("k" 0 1 (fontified t)) . -14858) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("e" 0 1 (fontified t)) . -14859) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 14860 (#("y" 0 1 (fontified t)) . -14860) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . 1) 14861) nil (26404 65174 695339 434000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -14848) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("o" 0 1 (fontified t)) . -14849) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("c" 0 1 (fontified t)) . -14850) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -14851) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#(" " 0 1 (fontified t)) . -14852) (undo-tree-id19 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14853) (undo-tree-id20 . -1) (#("k" 0 1 (fontified t)) . -14854) (undo-tree-id21 . -1) (#("b" 0 1 (fontified t)) . -14855) (undo-tree-id22 . -1) 14856 (#("d" 0 1 (fontified t)) . -14856) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t)) . -14857) (undo-tree-id24 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -14858) (undo-tree-id25 . -1) (#("C" 0 1 (face font-lock-string-face fontified t)) . -14859) (undo-tree-id26 . -1) (#("-" 0 1 (face font-lock-string-face fontified t)) . -14860) (undo-tree-id27 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -14861) (undo-tree-id28 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -14862) (undo-tree-id29 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -14863) (undo-tree-id30 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -14864) (undo-tree-id31 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14865) (undo-tree-id32 . -1) (#(" " 0 1 (fontified t)) . -14866) (undo-tree-id33 . -1) (#("#" 0 1 (fontified t)) . -14867) (undo-tree-id34 . -1) (#("'" 0 1 (fontified t)) . -14868) (undo-tree-id35 . -1) (#("y" 0 1 (fontified t)) . -14869) (undo-tree-id36 . -1) (#("a" 0 1 (fontified nil)) . -14870) (undo-tree-id37 . -1) (#("s" 0 1 (fontified t)) . -14871) (undo-tree-id38 . -1) (#("-" 0 1 (fontified t)) . -14872) (undo-tree-id39 . -1) (#("e" 0 1 (fontified t)) . -14873) (undo-tree-id40 . -1) (#("x" 0 1 (fontified t)) . -14874) (undo-tree-id41 . -1) (#("p" 0 1 (fontified t)) . -14875) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -14876) (undo-tree-id43 . -1) 14877 (#("n" 0 1 (fontified t)) . -14877) (undo-tree-id44 . -1) (#("d" 0 1 (fontified t)) . -14878) (undo-tree-id45 . -1) (#("-" 0 1 (fontified t)) . -14879) (undo-tree-id46 . -1) (#("f" 0 1 (fontified t)) . -14880) (undo-tree-id47 . -1) (#("r" 0 1 (fontified t)) . -14881) (undo-tree-id48 . -1) (#("o" 0 1 (fontified t)) . -14882) (undo-tree-id49 . -1) (#("m" 0 1 (fontified t)) . -14883) (undo-tree-id50 . -1) (#("-" 0 1 (fontified t)) . -14884) (undo-tree-id51 . -1) (#("t" 0 1 (fontified t)) . -14885) (undo-tree-id52 . -1) (#("r" 0 1 (fontified t)) . -14886) (undo-tree-id53 . -1) (#("i" 0 1 (fontified t)) . -14887) (undo-tree-id54 . -1) (#("g" 0 1 (fontified t)) . -14888) (undo-tree-id55 . -1) (#("g" 0 1 (fontified t)) . -14889) (undo-tree-id56 . -1) (#("e" 0 1 (fontified t)) . -14890) (undo-tree-id57 . -1) (#("r" 0 1 (fontified t)) . -14891) (undo-tree-id58 . -1) (#("-" 0 1 (fontified t)) . -14892) (undo-tree-id59 . -1) (#("k" 0 1 (fontified t)) . -14893) (undo-tree-id60 . -1) (#("e" 0 1 (fontified t)) . -14894) (undo-tree-id61 . -1) (#("y" 0 1 (fontified t)) . -14895) (undo-tree-id62 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -14896) (undo-tree-id63 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -14897) (undo-tree-id64 . -1) 14898) nil (26404 65174 695305 13000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14909 . 14910) (nil fontified nil 14849 . 14910) (14849 . 14910) 14848) nil (26404 65174 695252 377000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -14848) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) 14849) nil (26404 65174 695248 669000) 0 nil])
([nil nil ((14908 . 14909)) nil (26404 65174 695216 862000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14907) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 14908 (t 26404 65174 736051 770000)) nil (26404 65181 812315 944000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-4-face) fontified t)) . -14848) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) 14849) nil (26404 65181 812141 957000) 0 nil])
([nil nil ((14907 . 14909) (t 26404 65181 812052 37000)) nil (26404 65237 28673 357000) 0 nil])
([nil nil ((14887 . 14888) (#("C" 0 1 (fontified t face font-lock-string-face)) . -14887) (undo-tree-id4 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -14888) (undo-tree-id5 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -14889) (undo-tree-id6 . -1) 14890 (t 26404 65237 72054 122000)) nil (26404 65408 218655 888000) 0 nil])
([nil nil ((14889 . 14892) (14888 . 14889) (#(" " 0 1 (fontified t face font-lock-string-face)) . -14888) (undo-tree-id0 . -1) (undo-tree-id1 . 1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -14889) (undo-tree-id2 . -1) 14890 (14889 . 14890) (#("y" 0 1 (fontified t face font-lock-string-face)) . -14889) (undo-tree-id3 . -1) 14890) nil (26404 65408 218646 241000) 0 nil])
([nil nil ((14913 . 14915) (14907 . 14913) (t 26404 65408 260060 580000)) nil (26405 52 105262 700000) 0 nil])
([nil nil ((14933 . 14946) (#("t" 0 1 (fontified t)) . -14933) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 14934 (14916 . 14934) (#("i" 0 1 (fontified t)) . -14916) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("n" 0 1 (fontified t)) . -14917) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 14918 (14914 . 14918)) nil (26405 52 105260 849000) 0 nil])
([nil nil ((#("	    (define-key evil-insert-state-map)))
" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-3-face)) 6 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t)) . 14908) (undo-tree-id7 . 4) (undo-tree-id8 . -41) (undo-tree-id9 . -37) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -38) (undo-tree-id15 . -38) (undo-tree-id16 . -38) (undo-tree-id17 . -38) (undo-tree-id18 . -5) (undo-tree-id19 . -41) (undo-tree-id20 . -38) (undo-tree-id21 . -38) (undo-tree-id22 . -37) (undo-tree-id23 . -37) (undo-tree-id24 . -37) (undo-tree-id25 . -37) (undo-tree-id26 . -37) (undo-tree-id27 . -37) (undo-tree-id28 . -37) (undo-tree-id29 . -42) 14945) nil (26405 52 105252 331000) 0 nil])
([nil nil ((14900 . 14920)) nil (26405 52 105219 427000) 0 nil])
([nil nil ((14927 . 14929) (t 26405 52 108067 365000)) nil (26405 57 772550 988000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -14905) (undo-tree-id12 . -1) (#("i" 0 1 (fontified t)) . -14906) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t)) . -14907) (undo-tree-id14 . -1) (#("l" 0 1 (fontified t)) . -14908) (undo-tree-id15 . -1) (#("d" 0 1 (fontified t)) . -14909) (undo-tree-id16 . -1) (#("-" 0 1 (fontified t)) . -14910) (undo-tree-id17 . -1) (#("o" 0 1 (fontified t)) . -14911) (undo-tree-id18 . -1) (#("r" 0 1 (fontified t)) . -14912) (undo-tree-id19 . -1) (#("-" 0 1 (fontified t)) . -14913) (undo-tree-id20 . -1) 14914 (t 26405 57 776067 579000)) nil (26405 102 663813 290000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -14899) (undo-tree-id0 . -1) (#("n" 0 1 (fontified t)) . -14900) (undo-tree-id1 . -1) (#("e" 0 1 (fontified t)) . -14901) (undo-tree-id2 . -1) (#("x" 0 1 (fontified t)) . -14902) (undo-tree-id3 . -1) (#("t" 0 1 (fontified t)) . -14903) (undo-tree-id4 . -1) (#("-" 0 1 (fontified t)) . -14904) (undo-tree-id5 . -1) (#("m" 0 1 (fontified t)) . -14905) (undo-tree-id6 . -1) (undo-tree-id7 . 1) (#("a" 0 1 (fontified t)) . -14906) (undo-tree-id8 . -1) (#("y" 0 1 (fontified t)) . -14907) (undo-tree-id9 . -1) (#("b" 0 1 (fontified t)) . -14908) (undo-tree-id10 . -1) (#("e" 0 1 (fontified t)) . -14909) (undo-tree-id11 . -1) 14910) nil (26405 102 663796 446000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14921 . 14922) (#("
" 0 1 (fontified nil)) . -14984) (14909 . 14985) 14898 (t 26405 102 664069 273000)) nil (26405 136 329935 858000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -14907) (undo-tree-id27 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -14908) (undo-tree-id28 . -1) 14909) nil (26405 136 329933 789000) 0 nil])
([nil nil ((14973 . 14983) (#("e" 0 1 (fontified t)) . -14973) (undo-tree-id21 . -1) (#("x" 0 1 (fontified t)) . -14974) (undo-tree-id22 . -1) (#("p" 0 1 (fontified t)) . -14975) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -14976) (undo-tree-id24 . -1) (#("n" 0 1 (fontified t)) . -14977) (undo-tree-id25 . -1) (#("d" 0 1 (fontified t)) . -14978) (undo-tree-id26 . -1) 14979) nil (26405 136 329927 257000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 14987) (t 26405 136 368070 544000)) nil (26405 194 77881 552000) 0 nil])
([nil nil ((#("            (define-key evil-insert-state-map (kbd \"M-SPC\") 'yas-next-field)))
" 0 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-4-face)) 47 51 (fontified t) 51 58 (fontified t face font-lock-string-face) 58 59 (fontified t face (rainbow-delimiters-depth-4-face)) 59 75 (fontified t) 75 76 (fontified t face (rainbow-delimiters-depth-3-face)) 76 77 (fontified t face (rainbow-delimiters-depth-2-face)) 77 78 (fontified t face (rainbow-delimiters-depth-1-face)) 78 79 (fontified t)) . 14908) (undo-tree-id0 . -78)) nil (26405 194 77879 177000) 0 nil])
([nil nil ((14907 . 14909)) nil (26405 194 77856 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14921 . 14922) (#("
" 0 1 (fontified nil)) . -14984) (14909 . 14985) 14908 (t 26405 194 116072 723000)) nil (26405 360 770334 951000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -14907) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -14908) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 14909) nil (26405 360 770332 370000) 0 nil])
([nil nil ((14962 . 14963) (#("S" 0 1 (fontified t face font-lock-string-face)) . -14962) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("P" 0 1 (fontified t face font-lock-string-face)) . -14963) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("C" 0 1 (fontified t face font-lock-string-face)) . -14964) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 14965) nil (26405 360 770309 461000) 0 nil])
([nil nil ((14972 . 14981) (14971 . 14972) (#("e" 0 1 (fontified t)) . -14971) (undo-tree-id1 . -1) (#("x" 0 1 (fontified t)) . -14972) (undo-tree-id2 . -1) (#("p" 0 1 (fontified t)) . -14973) (undo-tree-id3 . -1) (#("a" 0 1 (fontified t)) . -14974) (undo-tree-id4 . -1) (#("n" 0 1 (fontified t)) . -14975) (undo-tree-id5 . -1) (#("d" 0 1 (fontified t)) . -14976) (undo-tree-id6 . -1) 14977) nil (26405 360 770295 685000) 0 nil])
([nil nil ((nil rear-nonsticky nil 14996 . 14997) (#("
" 0 1 (fontified nil)) . -15061) (14984 . 15062) 14908 (t 26405 360 772079 10000)) nil (26405 412 216316 781000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -14982) (undo-tree-id8 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -14983) (undo-tree-id9 . -1) 14984) nil (26405 412 216314 92000) 0 nil])
([nil nil ((15046 . 15054) (#("n" 0 1 (fontified t)) . -15046) (undo-tree-id4 . -1) (#("e" 0 1 (fontified t)) . -15047) (undo-tree-id5 . -1) (#("x" 0 1 (fontified t)) . -15048) (undo-tree-id6 . -1) (#("t" 0 1 (fontified t)) . -15049) (undo-tree-id7 . -1) 15050) nil (26405 412 216310 844000) 0 nil])
([nil nil ((15037 . 15038) (#("n" 0 1 (face font-lock-string-face fontified t)) . -15037) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 15038) nil (26405 412 216303 128000) 0 nil])
([nil current ((15048 . 15050) (#("e" 0 1 (fontified t)) . -15048) (undo-tree-id0 . -1) (#("v" 0 1 (fontified t)) . -15049) (undo-tree-id1 . -1) (#("i" 0 1 (fontified t)) . -15050) (undo-tree-id2 . -1) (#("o" 0 1 (fontified t)) . -15051) (undo-tree-id3 . -1) (#("u" 0 1 (fontified t)) . -15052) (undo-tree-id4 . -1) (#("s" 0 1 (fontified t)) . -15053) (undo-tree-id5 . -1) 15054 (t 26405 412 220080 951000)) nil (26405 460 450090 143000) 0 nil])
nil
