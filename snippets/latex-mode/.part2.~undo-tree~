(undo-tree-save-format-version . 1)
"d20c2e969575e198eab561080403ebe67c8a115d"
[nil nil nil nil (26399 61573 757803 978000) 0 nil]
([nil nil ((apply yas--snippet-revive 1 47 #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 4 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 4 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (1 . 47)) nil (26399 61573 757802 837000) 0 nil])
([nil nil ((44 . 45) (34 . 44) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -34) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -35) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -37) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 38 (32 . 38)) nil (26399 61573 757800 918000) 0 nil])
([nil nil ((54 . 59) (#("2" 0 1 (fontified t face font-lock-comment-face)) . -54) (undo-tree-id5 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -55) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -56) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -57) (undo-tree-id8 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -58) (undo-tree-id9 . -1) 59 (54 . 59)) nil (26399 61573 757792 270000) 0 nil])
([nil current ((95 . 107) (92 . 95) (#("i" 0 1 (fontified t)) . -92) (undo-tree-id0 . -1) 93 (86 . 93) (65 . 86) (#("<" 0 1 (fontified t)) . -65) (undo-tree-id1 . -1) 66 (#("f" 0 1 (fontified t)) . -66) (undo-tree-id2 . -1) 67 (65 . 67) (#("
" 0 1 (fontified t)) . -65) (undo-tree-id3 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -66) (undo-tree-id4 . -1) 67 (66 . 67) (65 . 66) 65) nil (26399 61573 757782 228000) 0 nil])
nil
