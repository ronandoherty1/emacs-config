(undo-tree-save-format-version . 1)
"d7e30dfcf541082194ffcbb8ee9abc932b4b5577"
[nil nil nil nil (26427 44946 217776 189000) 0 nil]
([nil nil ((apply yas--snippet-revive 1 47 #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 2 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #8) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #7 #s(yas--exit 47 nil) nil))) #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) #s(yas--exit 47 nil) 2 nil #s(yas--field 1 33 33 nil (#s(yas--mirror 41 41 (yas--key-from-desc yas-text) #s(yas--field 2 41 41 nil nil nil nil #7) #s(yas--exit 47 nil) nil)) nil nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--mirror 41 41 (yas--key-from-desc yas-text) #6 #s(yas--exit 47 nil) nil))) nil nil)) (1 . 47)) nil (26427 44946 217774 769000) 0 nil])
([nil nil ((41 . 49) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -41) (undo-tree-id18 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -42) (undo-tree-id19 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -43) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -44) (undo-tree-id21 . -1) 45 (42 . 45) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -42) (undo-tree-id22 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -43) (undo-tree-id23 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -44) (undo-tree-id24 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -45) (undo-tree-id25 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -46) (undo-tree-id26 . -1) 47 (46 . 47) (32 . 46)) nil (26427 44946 217771 851000) 0 nil])
([nil nil ((60 . 61) (#("b" 0 1 (fontified t face font-lock-comment-face)) . -60) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 61 (59 . 61) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -59) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -60) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -61) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -62) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -63) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 64 (58 . 64)) nil (26427 44946 217760 327000) 0 nil])
([nil current ((67 . 85)) nil (26427 44946 217726 396000) 0 nil])
nil
